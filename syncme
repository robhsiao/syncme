#!/bin/env python2.4

import os, sys, getopt
import ConfigParser

__author__  = "Robin Xiao"
__version__ = "0.1.0"

# Global vars
program = os.path.basename(sys.argv[0])

def print_usage():#{{{
    print "\n".join((
        "Usage: %(program)s -f target [module1 [...]]",
        "\t-f --force: go straight, no preview",
        "\t-h --help: print this help message",
        "\t-V --version: print version infomation",
        )) % {'program':program}
#}}}

def print_version():#{{{
    print "%(program)s %(version)s" % {'program':program, 'version': __version__}
#}}}

def establish_tunnel():#{{{
    pass
#}}}

def parse_command_options(): #{{{
    options = {}
    try:
        opts, args = getopt.getopt(sys.argv[1:], "fhV", ["force","help","version"])
    except getopt.GetoptError:
        print >> sys.stderr, \
                "** %s: %s" % (program, str(sys.exc_info()[1]))
        print_usage()
        sys.exit(1)

    # parse options
    for opt, arg in opts:
        if opt in ("-f", "--force"):
            options['force'] = True
        elif opt in ("-h", "--help"):
            print_usage()
            sys.exit(0)
        elif opt in ("-V", "--version"):
            print_version()
            sys.exit(0)

    # parse arguments
    for idx, arg in enumerate(args):
        if idx == 0:
            options['target'] = arg
        else:
            if not 'modules' in options:
                options['modules'] = []
            options['modules'].append(arg)

    # check whether target specified
    if not 'target' in options:
        print >> sys.stderr, \
                "** %s: No target specified" % program
        print_usage()
        sys.exit(1)
    return options
#}}}

def parse_configure():#{{{
    conf = None
    configure = None

    # Syncfile pattern, order by priority
    patterns = ('Syncfile', 'syncfile', 'Syncmefile', 'syncmefile')

    for pattern in patterns:
        if os.path.isfile(pattern):
            conf = pattern

    if not conf:
        print >> sys.stderr, \
                "** %s: No Syncfile found in current directory" % program
        sys.exit(1)

    cf = ConfigParser.ConfigParser()
    try:
        cf.read(conf)
    except ConfigParser.ParsingError:
        print >> sys.stderr, \
                "** %s: Error while parsing Syncfile\n%s" % (program, str(sys.exc_info()[1]))
        sys.exit(1)

    configure = {'modules' : {}, 'targets' : {}}

    if not configure['modules']:
        print >> sys.stderr, \
                "** %s: No any modules defined" % program
        sys.exit(1)

    if not configure['targets']:
        print >> sys.stderr, \
                "** %s: No any targets defined" % program
        sys.exit(1)
#}}}

def main():#{{{
    os.chdir(os.getcwd())

    options = {'force': False, 'target': None, 'modules': []}
    options.update(parse_command_options())

    configure = parse_configure()
#}}}

if __name__ == "__main__":
    main()
